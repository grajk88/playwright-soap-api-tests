import { test, expect, request } from '@playwright/test';
import { faker } from '@faker-js/faker';
import { XMLParser } from 'fast-xml-parser';
import fs from 'fs';
import path from 'path';
import { getColumnValuesFromExcel } from '../utils/excelUtils';

// Load and inject SOAP XML template
function loadSoapTemplate(intA: number, intB: number): string {
  const templatePath = path.join(__dirname, '..', 'templates', 'addRequestTemplate.xml');
  const template = fs.readFileSync(templatePath, 'utf-8');
  return template.replace('{{intA}}', intA.toString()).replace('{{intB}}', intB.toString());
}

test.skip('Autogenerated Data', async () => {
  
  const intA = faker.number.int({ min: 1, max: 100 });
  const intB = faker.number.int({ min: 1, max: 100 });
  const expectedSum = intA + intB;

  const soapEnvelope = loadSoapTemplate(intA, intB);

  const context = await request.newContext();
  const response = await context.post('http://www.dneonline.com/calculator.asmx', {
    headers: {
      'Content-Type': 'text/xml; charset=utf-8',
      'SOAPAction': 'http://tempuri.org/Add',
    },
    data: soapEnvelope,
  });

  expect(response.status()).toBe(200);
  const responseText = await response.text();

  const parser = new XMLParser({ ignoreAttributes: false });
  const parsed = parser.parse(responseText);
  const addResult = parsed['soap:Envelope']['soap:Body']['AddResponse']['AddResult'];

  console.log(`intA: ${intA}, intB: ${intB}, AddResult: ${addResult}, Expected: ${expectedSum}`);
  expect(Number(addResult)).toBe(expectedSum);
});

test.describe('Data-driven using Excel Column', () => {
  const intBValues = getColumnValuesFromExcel('intB');

  for (const intB of intBValues) {
    test(`Validate AddResult for intB=${intB}`, async () => {
      const intA = faker.number.int({ min: 1, max: 100 });
      const expectedSum = intA + Number(intB);
      const soapEnvelope = loadSoapTemplate(intA, Number(intB));

      const context = await request.newContext();
      const response = await context.post('http://www.dneonline.com/calculator.asmx', {
        headers: {
          'Content-Type': 'text/xml; charset=utf-8',
          'SOAPAction': 'http://tempuri.org/Add',
        },
        data: soapEnvelope,
      });

      expect(response.status()).toBe(200);
      const responseText = await response.text();

      const parser = new XMLParser({ ignoreAttributes: false });
      const parsed = parser.parse(responseText);
      const addResult = parsed['soap:Envelope']['soap:Body']['AddResponse']['AddResult'];

      console.log(`intA: ${intA}, intB: ${intB}, AddResult: ${addResult}, Expected: ${expectedSum}`);
      expect(Number(addResult)).toBe(expectedSum);
    });
  }
});
